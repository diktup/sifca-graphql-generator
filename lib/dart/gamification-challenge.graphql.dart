// GENERATED CODE - DO NOT MODIFY BY HAND

import 'package:artemis/artemis.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:equatable/equatable.dart';
import 'package:gql/ast.dart';
part 'gamification-challenge.graphql.g.dart';

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$MediaType$PictureType();

  factory GetChallenges$Query$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$MediaType$PictureTypeFromJson(json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$MediaType$PictureTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$MediaType extends JsonSerializable
    with EquatableMixin {
  GetChallenges$Query$ChallengeType$MediaType();

  factory GetChallenges$Query$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$MediaTypeFromJson(json);

  List<String>? videos;

  List<GetChallenges$Query$ChallengeType$MediaType$PictureType>? deg360;

  List<GetChallenges$Query$ChallengeType$MediaType$PictureType>? pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$MediaTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeType();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$MediaType? media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  GetChallenges$Query$ChallengeType$ChallengeTypeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$UserType$PhoneType();

  factory GetChallenges$Query$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$UserType$PhoneTypeFromJson(json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$UserType$PhoneTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$UserType$PictureType();

  factory GetChallenges$Query$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$UserType$PictureTypeFromJson(json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$UserType$PictureTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$UserType extends JsonSerializable
    with EquatableMixin {
  GetChallenges$Query$ChallengeType$UserType();

  factory GetChallenges$Query$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$UserTypeFromJson(json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  GetChallenges$Query$ChallengeType$UserType$PhoneType? phone;

  GetChallenges$Query$ChallengeType$UserType$PictureType? picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$UserTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeWinner();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeWinnerFromJson(json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeWinnerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$ChallengeTypeCheckpoint();

  factory GetChallenges$Query$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeCheckpointFromJson(json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$ChallengeTypeCheckpointToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$AudienceType extends JsonSerializable
    with EquatableMixin {
  GetChallenges$Query$ChallengeType$AudienceType();

  factory GetChallenges$Query$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$AudienceTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$AudienceTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$TargetType$PointOfSaleType();

  factory GetChallenges$Query$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$TargetType$WholesalerType();

  factory GetChallenges$Query$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$TargetType$WholesalerTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallenges$Query$ChallengeType$TargetType$ManufacturerType();

  factory GetChallenges$Query$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType$TargetType extends JsonSerializable
    with EquatableMixin {
  GetChallenges$Query$ChallengeType$TargetType();

  factory GetChallenges$Query$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeType$TargetTypeFromJson(json);

  GetChallenges$Query$ChallengeType$TargetType$PointOfSaleType? pos;

  GetChallenges$Query$ChallengeType$TargetType$WholesalerType? wholesaler;

  GetChallenges$Query$ChallengeType$TargetType$ManufacturerType? manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeType$TargetTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query$ChallengeType extends JsonSerializable
    with EquatableMixin {
  GetChallenges$Query$ChallengeType();

  factory GetChallenges$Query$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallenges$Query$ChallengeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  GetChallenges$Query$ChallengeType$MediaType? media;

  GetChallenges$Query$ChallengeType$ChallengeTypeType? challengeType;

  GetChallenges$Query$ChallengeType$UserType? creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeWinner>? winners;

  List<GetChallenges$Query$ChallengeType$ChallengeTypeCheckpoint>? checkpoints;

  int? maxAnswers;

  GetChallenges$Query$ChallengeType$AudienceType? audience;

  GetChallenges$Query$ChallengeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallenges$Query$ChallengeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallenges$Query extends JsonSerializable with EquatableMixin {
  GetChallenges$Query();

  factory GetChallenges$Query.fromJson(Map<String, dynamic> json) =>
      _$GetChallenges$QueryFromJson(json);

  late List<GetChallenges$Query$ChallengeType> getChallenges;

  @override
  List<Object?> get props => [getChallenges];

  @override
  Map<String, dynamic> toJson() => _$GetChallenges$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType?
      media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserTypeFromJson(
          json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType?
      phone;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType?
      picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeFromJson(
          json);

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType();

  factory GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$MediaType?
      media;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType?
      challengeType;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$UserType?
      creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner>?
      winners;

  List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType?
      audience;

  GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateType$ChallengeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query$ChallengePaginateType
    extends JsonSerializable with EquatableMixin {
  GetChallengesPaginated$Query$ChallengePaginateType();

  factory GetChallengesPaginated$Query$ChallengePaginateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesPaginated$Query$ChallengePaginateTypeFromJson(json);

  int? count;

  bool? isLast;

  late List<GetChallengesPaginated$Query$ChallengePaginateType$ChallengeType>
      objects;

  @override
  List<Object?> get props => [count, isLast, objects];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginated$Query$ChallengePaginateTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginated$Query extends JsonSerializable
    with EquatableMixin {
  GetChallengesPaginated$Query();

  factory GetChallengesPaginated$Query.fromJson(Map<String, dynamic> json) =>
      _$GetChallengesPaginated$QueryFromJson(json);

  late GetChallengesPaginated$Query$ChallengePaginateType
      getChallengesPaginated;

  @override
  List<Object?> get props => [getChallengesPaginated];

  @override
  Map<String, dynamic> toJson() => _$GetChallengesPaginated$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PaginationInput extends JsonSerializable with EquatableMixin {
  PaginationInput({
    this.page,
    this.limit,
  });

  factory PaginationInput.fromJson(Map<String, dynamic> json) =>
      _$PaginationInputFromJson(json);

  int? page;

  int? limit;

  @override
  List<Object?> get props => [page, limit];

  @override
  Map<String, dynamic> toJson() => _$PaginationInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$MediaType$PictureType();

  factory Challenge$Query$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$MediaType$PictureTypeFromJson(json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$MediaType$PictureTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$MediaType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$MediaType();

  factory Challenge$Query$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$MediaTypeFromJson(json);

  List<String>? videos;

  List<Challenge$Query$ChallengeType$MediaType$PictureType>? deg360;

  List<Challenge$Query$ChallengeType$MediaType$PictureType>? pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$MediaTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$MediaType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$MediaTypeFromJson(json);

  List<String>? videos;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$MediaTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeType$TargetTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeType();

  factory Challenge$Query$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  Challenge$Query$ChallengeType$ChallengeTypeType$MediaType? media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<Challenge$Query$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  Challenge$Query$ChallengeType$ChallengeTypeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$UserType$PhoneType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$UserType$PhoneType();

  factory Challenge$Query$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$UserType$PhoneTypeFromJson(json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$UserType$PhoneTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$UserType$PictureType();

  factory Challenge$Query$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$UserType$PictureTypeFromJson(json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$UserType$PictureTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$UserType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$UserType();

  factory Challenge$Query$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$UserTypeFromJson(json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  Challenge$Query$ChallengeType$UserType$PhoneType? phone;

  Challenge$Query$ChallengeType$UserType$PictureType? picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$UserTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeWinner extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeWinner();

  factory Challenge$Query$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeWinnerFromJson(json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeWinnerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$ChallengeTypeCheckpoint();

  factory Challenge$Query$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$ChallengeTypeCheckpointFromJson(json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$ChallengeTypeCheckpointToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$AudienceType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$AudienceType();

  factory Challenge$Query$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$AudienceTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$AudienceTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$TargetType$PointOfSaleType();

  factory Challenge$Query$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$TargetType$PointOfSaleTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$TargetType$PointOfSaleTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$TargetType$WholesalerType();

  factory Challenge$Query$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$TargetType$WholesalerTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$TargetType$WholesalerTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  Challenge$Query$ChallengeType$TargetType$ManufacturerType();

  factory Challenge$Query$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$TargetType$ManufacturerTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$TargetType$ManufacturerTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType$TargetType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType$TargetType();

  factory Challenge$Query$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeType$TargetTypeFromJson(json);

  Challenge$Query$ChallengeType$TargetType$PointOfSaleType? pos;

  Challenge$Query$ChallengeType$TargetType$WholesalerType? wholesaler;

  Challenge$Query$ChallengeType$TargetType$ManufacturerType? manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$Challenge$Query$ChallengeType$TargetTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query$ChallengeType extends JsonSerializable
    with EquatableMixin {
  Challenge$Query$ChallengeType();

  factory Challenge$Query$ChallengeType.fromJson(Map<String, dynamic> json) =>
      _$Challenge$Query$ChallengeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  Challenge$Query$ChallengeType$MediaType? media;

  Challenge$Query$ChallengeType$ChallengeTypeType? challengeType;

  Challenge$Query$ChallengeType$UserType? creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<Challenge$Query$ChallengeType$ChallengeTypeWinner>? winners;

  List<Challenge$Query$ChallengeType$ChallengeTypeCheckpoint>? checkpoints;

  int? maxAnswers;

  Challenge$Query$ChallengeType$AudienceType? audience;

  Challenge$Query$ChallengeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() => _$Challenge$Query$ChallengeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Challenge$Query extends JsonSerializable with EquatableMixin {
  Challenge$Query();

  factory Challenge$Query.fromJson(Map<String, dynamic> json) =>
      _$Challenge$QueryFromJson(json);

  late Challenge$Query$ChallengeType challenge;

  @override
  List<Object?> get props => [challenge];

  @override
  Map<String, dynamic> toJson() => _$Challenge$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType?
      media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserTypeFromJson(
          json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType?
      phone;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType?
      picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$MediaType?
      media;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType?
      challengeType;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$UserType?
      creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner>?
      winners;

  List<GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType?
      audience;

  GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query$ChallengePaginateType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetPaginated$Query$ChallengePaginateType();

  factory GetChallengesByTargetPaginated$Query$ChallengePaginateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateTypeFromJson(
          json);

  int? count;

  bool? isLast;

  late List<
          GetChallengesByTargetPaginated$Query$ChallengePaginateType$ChallengeType>
      objects;

  @override
  List<Object?> get props => [count, isLast, objects];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$Query$ChallengePaginateTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginated$Query extends JsonSerializable
    with EquatableMixin {
  GetChallengesByTargetPaginated$Query();

  factory GetChallengesByTargetPaginated$Query.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginated$QueryFromJson(json);

  late GetChallengesByTargetPaginated$Query$ChallengePaginateType
      getChallengesByTargetPaginated;

  @override
  List<Object?> get props => [getChallengesByTargetPaginated];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginated$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TargetACIInput extends JsonSerializable with EquatableMixin {
  TargetACIInput({
    this.pos,
    this.wholesaler,
    this.manufacturer,
    this.user,
  });

  factory TargetACIInput.fromJson(Map<String, dynamic> json) =>
      _$TargetACIInputFromJson(json);

  String? pos;

  String? wholesaler;

  String? manufacturer;

  String? user;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer, user];

  @override
  Map<String, dynamic> toJson() => _$TargetACIInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType?
      media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserTypeFromJson(
          json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType?
      phone;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType?
      picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$MediaType?
      media;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType?
      challengeType;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$UserType?
      creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner>?
      winners;

  List<GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$AudienceType?
      audience;

  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType();

  factory GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateTypeFromJson(
          json);

  int? count;

  bool? isLast;

  late List<
          GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType$ChallengeType>
      objects;

  @override
  List<Object?> get props => [count, isLast, objects];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginated$Query extends JsonSerializable
    with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginated$Query();

  factory GetChallengesByTargetAndCreatorPaginated$Query.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginated$QueryFromJson(json);

  late GetChallengesByTargetAndCreatorPaginated$Query$ChallengePaginateType
      getChallengesByTargetAndCreatorPaginated;

  @override
  List<Object?> get props => [getChallengesByTargetAndCreatorPaginated];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginated$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$MediaType?
      media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserTypeFromJson(
          json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PhoneType?
      phone;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType$PictureType?
      picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinnerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$AudienceType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$AudienceTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeFromJson(
          json);

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$PointOfSaleType?
      pos;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$WholesalerType?
      wholesaler;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$MediaType?
      media;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeType?
      challengeType;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$UserType?
      creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeWinner>?
      winners;

  List<GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$AudienceType?
      audience;

  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateTypeFromJson(
          json);

  int? count;

  bool? isLast;

  late List<
          GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType$ChallengeType>
      objects;

  @override
  List<Object?> get props => [count, isLast, objects];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginated$Query
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginated$Query();

  factory GetChallengesByTargetAndUserAudiencePaginated$Query.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginated$QueryFromJson(json);

  late GetChallengesByTargetAndUserAudiencePaginated$Query$ChallengePaginateType
      getChallengesByTargetAndUserAudiencePaginated;

  @override
  List<Object?> get props => [getChallengesByTargetAndUserAudiencePaginated];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginated$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PhoneType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType$PictureType?
      flagWide;

  @override
  List<Object?> get props =>
      [id, name, code, iconFlag, createdAt, updatedAt, flagSquare, flagWide];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$LonLatType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$LonLatType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$LonLatType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$LonLatTypeFromJson(
          json);

  String? type;

  List<double>? coordinates;

  @override
  List<Object?> get props => [type, coordinates];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$LonLatTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateTypeFromJson(
          json);

  late String id;

  late String name;

  String? adminName;

  @JsonKey(unknownEnumValue: StateCapitalEnum.artemisUnknown)
  StateCapitalEnum? capital;

  String? population;

  String? ascii;

  String? lat;

  String? lng;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$CountryType?
      country;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        adminName,
        capital,
        population,
        ascii,
        lat,
        lng,
        country,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneTypeFromJson(
          json);

  String? number;

  String? countryCode;

  @override
  List<Object?> get props => [number, countryCode];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerTypeFromJson(
          json);

  String? name;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType?
      phone;

  @override
  List<Object?> get props => [name, phone];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressTypeFromJson(
          json);

  String? city;

  String? address;

  String? postCode;

  String? addressLine;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$LonLatType?
      location;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$CountryType?
      country;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$StateType?
      state;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType$FullAddressOwnerType?
      owner;

  @override
  List<Object?> get props =>
      [city, address, postCode, addressLine, location, country, state, owner];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetTypeFromJson(
          json);

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size48;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size96;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size144;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size240;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size480;

  @override
  List<Object?> get props => [size48, size96, size144, size240, size480];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesTypeFromJson(
          json);

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType?
      svg;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType?
      png;

  @override
  List<Object?> get props => [svg, png];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesTypeFromJson(
          json);

  @JsonKey(unknownEnumValue: SocialImageStyleEnum.artemisUnknown)
  late SocialImageStyleEnum style;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType>?
      images;

  @override
  List<Object?> get props => [style, images];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? fontIcon;

  late DateTime createdAt;

  late DateTime updatedAt;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType$SocialImagesType>?
      images;

  @override
  List<Object?> get props =>
      [id, name, code, fontIcon, createdAt, updatedAt, images];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueTypeFromJson(
          json);

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType$SocialType?
      name;

  String? value;

  @override
  List<Object?> get props => [name, value];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$OoredooDataType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$OoredooDataType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$OoredooDataType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$OoredooDataTypeFromJson(
          json);

  String? id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$OoredooDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$FacebookDataType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$FacebookDataType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$FacebookDataType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$FacebookDataTypeFromJson(
          json);

  late String id;

  String? name;

  late String token;

  late String email;

  @JsonKey(name: 'last_name')
  String? lastName;

  @JsonKey(name: 'first_name')
  String? firstName;

  @override
  List<Object?> get props => [id, name, token, email, lastName, firstName];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$FacebookDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$GoogleDataType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$GoogleDataType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$GoogleDataType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$GoogleDataTypeFromJson(
          json);

  late String sub;

  String? name;

  late String email;

  late String token;

  String? locale;

  String? picture;

  @JsonKey(name: 'given_name')
  String? givenName;

  @JsonKey(name: 'family_name')
  String? familyName;

  @JsonKey(name: 'email_verified')
  bool? emailVerified;

  @override
  List<Object?> get props => [
        sub,
        name,
        email,
        token,
        locale,
        picture,
        givenName,
        familyName,
        emailVerified
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$GoogleDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$AppleDataType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$AppleDataType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$AppleDataType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$AppleDataTypeFromJson(
          json);

  String? email;

  String? status;

  String? givenName;

  String? familyName;

  late String identityToken;

  String? userIdentifier;

  String? authorizationCode;

  @override
  List<Object?> get props => [
        email,
        status,
        givenName,
        familyName,
        identityToken,
        userIdentifier,
        authorizationCode
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$AppleDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataTypeFromJson(
          json);

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$OoredooDataType?
      ooredoo;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$FacebookDataType?
      facebook;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$GoogleDataType?
      google;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType$AppleDataType?
      apple;

  @override
  List<Object?> get props => [ooredoo, facebook, google, apple];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserEducationType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserEducationType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserEducationType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserEducationTypeFromJson(
          json);

  @JsonKey(unknownEnumValue: AcademicLevel.artemisUnknown)
  AcademicLevel? level;

  String? name;

  String? description;

  List<String>? tags;

  DateTime? from;

  DateTime? to;

  bool? graduated;

  @override
  List<Object?> get props =>
      [level, name, description, tags, from, to, graduated];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserEducationTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateTypeFromJson(
          json);

  late String id;

  late String name;

  String? adminName;

  @JsonKey(unknownEnumValue: StateCapitalEnum.artemisUnknown)
  StateCapitalEnum? capital;

  String? population;

  String? ascii;

  String? lat;

  String? lng;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$CountryType?
      country;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        adminName,
        capital,
        population,
        ascii,
        lat,
        lng,
        country,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkTypeFromJson(
          json);

  String? company;

  String? position;

  String? description;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType$StateType?
      city;

  List<String>? tags;

  DateTime? from;

  DateTime? to;

  bool? current;

  @override
  List<Object?> get props =>
      [company, position, description, city, tags, from, to, current];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateTypeFromJson(
          json);

  late String id;

  late String name;

  String? adminName;

  @JsonKey(unknownEnumValue: StateCapitalEnum.artemisUnknown)
  StateCapitalEnum? capital;

  String? population;

  String? ascii;

  String? lat;

  String? lng;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$CountryType?
      country;

  late DateTime createdAt;

  late DateTime updatedAt;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureType?
      flagSquare;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        adminName,
        capital,
        population,
        ascii,
        lat,
        lng,
        country,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserTypeFromJson(
          json);

  late String id;

  @JsonKey(unknownEnumValue: App.artemisUnknown)
  List<App>? apps;

  String? email;

  @JsonKey(unknownEnumValue: UserRole.artemisUnknown)
  List<UserRole>? roles;

  String? title;

  String? about;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? locale;

  @JsonKey(unknownEnumValue: SourcesEnum.artemisUnknown)
  SourcesEnum? source;

  @JsonKey(unknownEnumValue: UserStatus.artemisUnknown)
  UserStatus? status;

  String? lastName;

  String? username;

  String? firstName;

  bool? plugged;

  late DateTime createdAt;

  late DateTime updatedAt;

  bool? isMailValid;

  DateTime? dateOfBirth;

  String? phoneNumber;

  @JsonKey(unknownEnumValue: MobileThemesEnum.artemisUnknown)
  MobileThemesEnum? mobileTheme;

  String? placeOfBirth;

  @JsonKey(unknownEnumValue: MaritalStatus.artemisUnknown)
  MaritalStatus? maritalStatus;

  bool? newsletterSubs;

  bool? hasAutoGeneratedEmail;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PhoneType?
      phone;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureType?
      picture;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$PictureType>?
      pictures;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$LanguageType>?
      languages;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$CountryType?
      nationality;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType>?
      billingAddress;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType>?
      shippingAddress;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$FullAddressType>?
      residentialAddress;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType>?
      chatContact;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialValueType>?
      socialMedia;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$SocialLoginDataType?
      socialLoginData;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserEducationType>?
      education;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$UserWorkType>?
      work;

  List<GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType$StateType>?
      lived;

  List<String>? hobbies;

  List<String>? interests;

  @override
  List<Object?> get props => [
        id,
        apps,
        email,
        roles,
        title,
        about,
        gender,
        locale,
        source,
        status,
        lastName,
        username,
        firstName,
        plugged,
        createdAt,
        updatedAt,
        isMailValid,
        dateOfBirth,
        phoneNumber,
        mobileTheme,
        placeOfBirth,
        maritalStatus,
        newsletterSubs,
        hasAutoGeneratedEmail,
        phone,
        picture,
        pictures,
        languages,
        nationality,
        billingAddress,
        shippingAddress,
        residentialAddress,
        chatContact,
        socialMedia,
        socialLoginData,
        education,
        work,
        lived,
        hobbies,
        interests
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PictureType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PictureType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PerksType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PerksType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PerksType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PerksTypeFromJson(
          json);

  late String discount;

  String? description;

  @override
  List<Object?> get props => [discount, description];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PerksTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$LevelIntervalType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$LevelIntervalType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$LevelIntervalType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$LevelIntervalTypeFromJson(
          json);

  int? min;

  int? max;

  @override
  List<Object?> get props => [min, max];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$LevelIntervalTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationTypeFromJson(
          json);

  late String id;

  late int rank;

  String? color;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PictureType?
      picture;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$PerksType?
      perks;

  late int lossAmount;

  int? nextLevelMax;

  late int inactivityCycle;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType$LevelIntervalType?
      levelInterval;

  String? reputationLevel;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        rank,
        color,
        picture,
        perks,
        lossAmount,
        nextLevelMax,
        inactivityCycle,
        levelInterval,
        reputationLevel,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardTypeFromJson(
          json);

  late GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$UserType
      user;

  late int rank;

  late String amount;

  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType$ReputationType?
      reputationLevel;

  @override
  List<Object?> get props => [user, rank, amount, reputationLevel];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType
    extends JsonSerializable with EquatableMixin {
  GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType();

  factory GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateTypeFromJson(
          json);

  int? count;

  bool? isLast;

  late List<
          GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType>
      objects;

  late GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType$WalletLeaderboardType
      currentUser;

  @override
  List<Object?> get props => [count, isLast, objects, currentUser];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallenge$Query extends JsonSerializable
    with EquatableMixin {
  GetLeaderboardByChallenge$Query();

  factory GetLeaderboardByChallenge$Query.fromJson(Map<String, dynamic> json) =>
      _$GetLeaderboardByChallenge$QueryFromJson(json);

  late GetLeaderboardByChallenge$Query$LeaderboardCurrentUserPaginateType
      getLeaderboardByChallenge;

  @override
  List<Object?> get props => [getLeaderboardByChallenge];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallenge$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$MediaType$PictureType();

  factory CreateChallenge$Mutation$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$MediaType extends JsonSerializable
    with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$MediaType();

  factory CreateChallenge$Mutation$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$MediaTypeFromJson(json);

  List<String>? videos;

  List<CreateChallenge$Mutation$ChallengeType$MediaType$PictureType>? deg360;

  List<CreateChallenge$Mutation$ChallengeType$MediaType$PictureType>? pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$MediaTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType? media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$UserType$PhoneType();

  factory CreateChallenge$Mutation$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$UserType$PhoneTypeFromJson(json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$UserType$PhoneTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$UserType$PictureType();

  factory CreateChallenge$Mutation$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$UserType$PictureTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$UserType extends JsonSerializable
    with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$UserType();

  factory CreateChallenge$Mutation$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$UserTypeFromJson(json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  CreateChallenge$Mutation$ChallengeType$UserType$PhoneType? phone;

  CreateChallenge$Mutation$ChallengeType$UserType$PictureType? picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$UserTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeWinner();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeWinnerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint();

  factory CreateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$AudienceType();

  factory CreateChallenge$Mutation$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$AudienceTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$AudienceTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType();

  factory CreateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$TargetType$WholesalerType();

  factory CreateChallenge$Mutation$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType();

  factory CreateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType$TargetType extends JsonSerializable
    with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType$TargetType();

  factory CreateChallenge$Mutation$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeType$TargetTypeFromJson(json);

  CreateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType? pos;

  CreateChallenge$Mutation$ChallengeType$TargetType$WholesalerType? wholesaler;

  CreateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeType$TargetTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation$ChallengeType extends JsonSerializable
    with EquatableMixin {
  CreateChallenge$Mutation$ChallengeType();

  factory CreateChallenge$Mutation$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$CreateChallenge$Mutation$ChallengeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  CreateChallenge$Mutation$ChallengeType$MediaType? media;

  CreateChallenge$Mutation$ChallengeType$ChallengeTypeType? challengeType;

  CreateChallenge$Mutation$ChallengeType$UserType? creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeWinner>? winners;

  List<CreateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  CreateChallenge$Mutation$ChallengeType$AudienceType? audience;

  CreateChallenge$Mutation$ChallengeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$CreateChallenge$Mutation$ChallengeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateChallenge$Mutation extends JsonSerializable with EquatableMixin {
  CreateChallenge$Mutation();

  factory CreateChallenge$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateChallenge$MutationFromJson(json);

  late CreateChallenge$Mutation$ChallengeType createChallenge;

  @override
  List<Object?> get props => [createChallenge];

  @override
  Map<String, dynamic> toJson() => _$CreateChallenge$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChallengeInput extends JsonSerializable with EquatableMixin {
  ChallengeInput({
    this.title,
    this.description,
    this.media,
    this.challengeType,
    this.startDate,
    this.endDate,
    this.status,
    this.winners,
    this.checkpoints,
    this.maxAnswers,
    this.audience,
    this.target,
  });

  factory ChallengeInput.fromJson(Map<String, dynamic> json) =>
      _$ChallengeInputFromJson(json);

  String? title;

  String? description;

  MediaInput? media;

  String? challengeType;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<ChallengeInputWinner>? winners;

  List<ChallengeInputCheckpoint>? checkpoints;

  int? maxAnswers;

  String? audience;

  TargetACIInput? target;

  @override
  List<Object?> get props => [
        title,
        description,
        media,
        challengeType,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target
      ];

  @override
  Map<String, dynamic> toJson() => _$ChallengeInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MediaInput extends JsonSerializable with EquatableMixin {
  MediaInput({
    this.videos,
    this.pictures,
    this.deg360,
  });

  factory MediaInput.fromJson(Map<String, dynamic> json) =>
      _$MediaInputFromJson(json);

  List<String>? videos;

  List<PictureInput>? pictures;

  List<PictureInput>? deg360;

  @override
  List<Object?> get props => [videos, pictures, deg360];

  @override
  Map<String, dynamic> toJson() => _$MediaInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PictureInput extends JsonSerializable with EquatableMixin {
  PictureInput({
    this.width,
    this.height,
    this.x,
    this.y,
    this.alt,
    required this.baseUrl,
    required this.path,
  });

  factory PictureInput.fromJson(Map<String, dynamic> json) =>
      _$PictureInputFromJson(json);

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  late String baseUrl;

  late String path;

  @override
  List<Object?> get props => [width, height, x, y, alt, baseUrl, path];

  @override
  Map<String, dynamic> toJson() => _$PictureInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChallengeInputWinner extends JsonSerializable with EquatableMixin {
  ChallengeInputWinner({
    required this.rank,
    this.reward,
  });

  factory ChallengeInputWinner.fromJson(Map<String, dynamic> json) =>
      _$ChallengeInputWinnerFromJson(json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() => _$ChallengeInputWinnerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ChallengeInputCheckpoint extends JsonSerializable with EquatableMixin {
  ChallengeInputCheckpoint({
    this.checkpoint,
    this.amount,
  });

  factory ChallengeInputCheckpoint.fromJson(Map<String, dynamic> json) =>
      _$ChallengeInputCheckpointFromJson(json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() => _$ChallengeInputCheckpointToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$MediaType$PictureType();

  factory UpdateChallenge$Mutation$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$MediaType extends JsonSerializable
    with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$MediaType();

  factory UpdateChallenge$Mutation$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$MediaTypeFromJson(json);

  List<String>? videos;

  List<UpdateChallenge$Mutation$ChallengeType$MediaType$PictureType>? deg360;

  List<UpdateChallenge$Mutation$ChallengeType$MediaType$PictureType>? pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$MediaTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType? media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$UserType$PhoneType();

  factory UpdateChallenge$Mutation$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$UserType$PhoneTypeFromJson(json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$UserType$PhoneTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$UserType$PictureType();

  factory UpdateChallenge$Mutation$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$UserType$PictureTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$UserType extends JsonSerializable
    with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$UserType();

  factory UpdateChallenge$Mutation$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$UserTypeFromJson(json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  UpdateChallenge$Mutation$ChallengeType$UserType$PhoneType? phone;

  UpdateChallenge$Mutation$ChallengeType$UserType$PictureType? picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$UserTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeWinner();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeWinnerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint();

  factory UpdateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$AudienceType();

  factory UpdateChallenge$Mutation$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$AudienceTypeFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$AudienceTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType();

  factory UpdateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$TargetType$WholesalerType();

  factory UpdateChallenge$Mutation$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType();

  factory UpdateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType$TargetType extends JsonSerializable
    with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType$TargetType();

  factory UpdateChallenge$Mutation$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetTypeFromJson(json);

  UpdateChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType? pos;

  UpdateChallenge$Mutation$ChallengeType$TargetType$WholesalerType? wholesaler;

  UpdateChallenge$Mutation$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeType$TargetTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation$ChallengeType extends JsonSerializable
    with EquatableMixin {
  UpdateChallenge$Mutation$ChallengeType();

  factory UpdateChallenge$Mutation$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateChallenge$Mutation$ChallengeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  UpdateChallenge$Mutation$ChallengeType$MediaType? media;

  UpdateChallenge$Mutation$ChallengeType$ChallengeTypeType? challengeType;

  UpdateChallenge$Mutation$ChallengeType$UserType? creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeWinner>? winners;

  List<UpdateChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  UpdateChallenge$Mutation$ChallengeType$AudienceType? audience;

  UpdateChallenge$Mutation$ChallengeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$UpdateChallenge$Mutation$ChallengeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallenge$Mutation extends JsonSerializable with EquatableMixin {
  UpdateChallenge$Mutation();

  factory UpdateChallenge$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateChallenge$MutationFromJson(json);

  late UpdateChallenge$Mutation$ChallengeType updateChallenge;

  @override
  List<Object?> get props => [updateChallenge];

  @override
  Map<String, dynamic> toJson() => _$UpdateChallenge$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureType>?
      deg360;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      deg360;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      deg360;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeFromJson(
          json);

  bool? enable;

  @JsonKey(unknownEnumValue: PredefinedActionsEnum.artemisUnknown)
  PredefinedActionsEnum? action;

  @override
  List<Object?> get props => [enable, action];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeFromJson(
          json);

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$PointOfSaleType?
      pos;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$WholesalerType?
      wholesaler;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? code;

  String? description;

  String? icon;

  String? theme;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$MediaType?
      media;

  late DateTime createdAt;

  late DateTime updatedAt;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$PredefinedActionType?
      predefined;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType$TargetType?
      target;

  @override
  List<Object?> get props => [
        id,
        title,
        code,
        description,
        icon,
        theme,
        media,
        createdAt,
        updatedAt,
        predefined,
        target
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      deg360;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeFromJson(
          json);

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$PointOfSaleType?
      pos;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$WholesalerType?
      wholesaler;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? icon;

  int? cost;

  @JsonKey(unknownEnumValue: JockerKindEnum.artemisUnknown)
  JockerKindEnum? kind;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$MediaType?
      media;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        icon,
        cost,
        kind,
        media,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerFromJson(
          json);

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker$JockerType?
      jocker;

  String? cost;

  @override
  List<Object?> get props => [jocker, cost];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJockerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetTypeFromJson(
          json);

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$PointOfSaleType?
      pos;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$WholesalerType?
      wholesaler;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  String? rules;

  String? icon;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$MediaType?
      media;

  int? minStep;

  int? minCheckPoints;

  String? minGiftValue;

  int? claimReward;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ActivityTypeType>?
      activityTypes;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$ChallengeTypeTypeJocker>?
      jockers;

  String? fees;

  bool? enable;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType$TargetType?
      target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        rules,
        icon,
        media,
        minStep,
        minCheckPoints,
        minGiftValue,
        claimReward,
        activityTypes,
        jockers,
        fees,
        enable,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PhoneType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PictureType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$UserTypeFromJson(
          json);

  late String id;

  String? email;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? lastName;

  String? username;

  String? firstName;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PhoneType? phone;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType$PictureType?
      picture;

  @override
  List<Object?> get props =>
      [id, email, gender, lastName, username, firstName, phone, picture];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$UserTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeWinner
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeWinner();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeWinner.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeWinnerFromJson(
          json);

  late int rank;

  double? reward;

  @override
  List<Object?> get props => [rank, reward];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeWinnerToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeCheckpointFromJson(
          json);

  int? checkpoint;

  double? amount;

  @override
  List<Object?> get props => [checkpoint, amount];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeCheckpointToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$AudienceType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$AudienceType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$AudienceType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$AudienceTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$AudienceTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$PointOfSaleTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$PointOfSaleTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$WholesalerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$WholesalerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$WholesalerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$WholesalerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$WholesalerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$ManufacturerType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$ManufacturerType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$ManufacturerType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$ManufacturerTypeFromJson(
          json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$ManufacturerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetTypeFromJson(
          json);

  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$PointOfSaleType?
      pos;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$WholesalerType?
      wholesaler;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType$ManufacturerType?
      manufacturer;

  @override
  List<Object?> get props => [pos, wholesaler, manufacturer];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation$ChallengeType
    extends JsonSerializable with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation$ChallengeType();

  factory RemoveAudienceFromChallenge$Mutation$ChallengeType.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeTypeFromJson(json);

  late String id;

  String? title;

  String? description;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$MediaType? media;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeType?
      challengeType;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$UserType? creator;

  DateTime? startDate;

  DateTime? endDate;

  @JsonKey(unknownEnumValue: ChallengeStatusEnum.artemisUnknown)
  ChallengeStatusEnum? status;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeWinner>?
      winners;

  List<RemoveAudienceFromChallenge$Mutation$ChallengeType$ChallengeTypeCheckpoint>?
      checkpoints;

  int? maxAnswers;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$AudienceType? audience;

  RemoveAudienceFromChallenge$Mutation$ChallengeType$TargetType? target;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        title,
        description,
        media,
        challengeType,
        creator,
        startDate,
        endDate,
        status,
        winners,
        checkpoints,
        maxAnswers,
        audience,
        target,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$Mutation$ChallengeTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallenge$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveAudienceFromChallenge$Mutation();

  factory RemoveAudienceFromChallenge$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallenge$MutationFromJson(json);

  late RemoveAudienceFromChallenge$Mutation$ChallengeType
      removeAudienceFromChallenge;

  @override
  List<Object?> get props => [removeAudienceFromChallenge];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallenge$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteChallenge$Mutation$DeleteResponseDtoType extends JsonSerializable
    with EquatableMixin {
  DeleteChallenge$Mutation$DeleteResponseDtoType();

  factory DeleteChallenge$Mutation$DeleteResponseDtoType.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteChallenge$Mutation$DeleteResponseDtoTypeFromJson(json);

  late bool success;

  late String message;

  @override
  List<Object?> get props => [success, message];

  @override
  Map<String, dynamic> toJson() =>
      _$DeleteChallenge$Mutation$DeleteResponseDtoTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteChallenge$Mutation extends JsonSerializable with EquatableMixin {
  DeleteChallenge$Mutation();

  factory DeleteChallenge$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteChallenge$MutationFromJson(json);

  late DeleteChallenge$Mutation$DeleteResponseDtoType deleteChallenge;

  @override
  List<Object?> get props => [deleteChallenge];

  @override
  Map<String, dynamic> toJson() => _$DeleteChallenge$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PhoneType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PhoneType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PhoneTypeFromJson(
          json);

  String? number;

  bool? isValid;

  String? countryCode;

  int? validationNumber;

  @override
  List<Object?> get props => [number, isValid, countryCode, validationNumber];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType$PictureType?
      flagWide;

  @override
  List<Object?> get props =>
      [id, name, code, iconFlag, createdAt, updatedAt, flagSquare, flagWide];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$LonLatType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$LonLatType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$LonLatType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$LonLatTypeFromJson(
          json);

  String? type;

  List<double>? coordinates;

  @override
  List<Object?> get props => [type, coordinates];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$LonLatTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateTypeFromJson(
          json);

  late String id;

  late String name;

  String? adminName;

  @JsonKey(unknownEnumValue: StateCapitalEnum.artemisUnknown)
  StateCapitalEnum? capital;

  String? population;

  String? ascii;

  String? lat;

  String? lng;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$CountryType?
      country;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        adminName,
        capital,
        population,
        ascii,
        lat,
        lng,
        country,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneTypeFromJson(
          json);

  String? number;

  String? countryCode;

  @override
  List<Object?> get props => [number, countryCode];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerTypeFromJson(
          json);

  String? name;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType$FullAddressOwnerPhoneType?
      phone;

  @override
  List<Object?> get props => [name, phone];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressTypeFromJson(
          json);

  String? city;

  String? address;

  String? postCode;

  String? addressLine;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$LonLatType?
      location;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$CountryType?
      country;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$StateType?
      state;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType$FullAddressOwnerType?
      owner;

  @override
  List<Object?> get props =>
      [city, address, postCode, addressLine, location, country, state, owner];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetTypeFromJson(
          json);

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size48;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size96;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size144;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size240;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType$PictureType?
      size480;

  @override
  List<Object?> get props => [size48, size96, size144, size240, size480];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesTypeFromJson(
          json);

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType?
      svg;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType$SocialImagesImagesSetType?
      png;

  @override
  List<Object?> get props => [svg, png];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesTypeFromJson(
          json);

  @JsonKey(unknownEnumValue: SocialImageStyleEnum.artemisUnknown)
  late SocialImageStyleEnum style;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType$SocialImagesImagesType>?
      images;

  @override
  List<Object?> get props => [style, images];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? fontIcon;

  late DateTime createdAt;

  late DateTime updatedAt;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType$SocialImagesType>?
      images;

  @override
  List<Object?> get props =>
      [id, name, code, fontIcon, createdAt, updatedAt, images];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueTypeFromJson(
          json);

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType$SocialType?
      name;

  String? value;

  @override
  List<Object?> get props => [name, value];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$OoredooDataType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$OoredooDataType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$OoredooDataType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$OoredooDataTypeFromJson(
          json);

  String? id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$OoredooDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$FacebookDataType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$FacebookDataType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$FacebookDataType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$FacebookDataTypeFromJson(
          json);

  late String id;

  String? name;

  late String token;

  late String email;

  @JsonKey(name: 'last_name')
  String? lastName;

  @JsonKey(name: 'first_name')
  String? firstName;

  @override
  List<Object?> get props => [id, name, token, email, lastName, firstName];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$FacebookDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$GoogleDataType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$GoogleDataType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$GoogleDataType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$GoogleDataTypeFromJson(
          json);

  late String sub;

  String? name;

  late String email;

  late String token;

  String? locale;

  String? picture;

  @JsonKey(name: 'given_name')
  String? givenName;

  @JsonKey(name: 'family_name')
  String? familyName;

  @JsonKey(name: 'email_verified')
  bool? emailVerified;

  @override
  List<Object?> get props => [
        sub,
        name,
        email,
        token,
        locale,
        picture,
        givenName,
        familyName,
        emailVerified
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$GoogleDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$AppleDataType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$AppleDataType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$AppleDataType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$AppleDataTypeFromJson(
          json);

  String? email;

  String? status;

  String? givenName;

  String? familyName;

  late String identityToken;

  String? userIdentifier;

  String? authorizationCode;

  @override
  List<Object?> get props => [
        email,
        status,
        givenName,
        familyName,
        identityToken,
        userIdentifier,
        authorizationCode
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$AppleDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataTypeFromJson(
          json);

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$OoredooDataType?
      ooredoo;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$FacebookDataType?
      facebook;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$GoogleDataType?
      google;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType$AppleDataType?
      apple;

  @override
  List<Object?> get props => [ooredoo, facebook, google, apple];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserEducationType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserEducationType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserEducationType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserEducationTypeFromJson(
          json);

  @JsonKey(unknownEnumValue: AcademicLevel.artemisUnknown)
  AcademicLevel? level;

  String? name;

  String? description;

  List<String>? tags;

  DateTime? from;

  DateTime? to;

  bool? graduated;

  @override
  List<Object?> get props =>
      [level, name, description, tags, from, to, graduated];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserEducationTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateTypeFromJson(
          json);

  late String id;

  late String name;

  String? adminName;

  @JsonKey(unknownEnumValue: StateCapitalEnum.artemisUnknown)
  StateCapitalEnum? capital;

  String? population;

  String? ascii;

  String? lat;

  String? lng;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$CountryType?
      country;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        adminName,
        capital,
        population,
        ascii,
        lat,
        lng,
        country,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkTypeFromJson(
          json);

  String? company;

  String? position;

  String? description;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType$StateType?
      city;

  List<String>? tags;

  DateTime? from;

  DateTime? to;

  bool? current;

  @override
  List<Object?> get props =>
      [company, position, description, city, tags, from, to, current];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryTypeFromJson(
          json);

  late String id;

  late String name;

  String? code;

  String? dialCode;

  String? iconFlag;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        code,
        dialCode,
        iconFlag,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateTypeFromJson(
          json);

  late String id;

  late String name;

  String? adminName;

  @JsonKey(unknownEnumValue: StateCapitalEnum.artemisUnknown)
  StateCapitalEnum? capital;

  String? population;

  String? ascii;

  String? lat;

  String? lng;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$CountryType?
      country;

  late DateTime createdAt;

  late DateTime updatedAt;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureType?
      flagSquare;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType$PictureType?
      flagWide;

  @override
  List<Object?> get props => [
        id,
        name,
        adminName,
        capital,
        population,
        ascii,
        lat,
        lng,
        country,
        createdAt,
        updatedAt,
        flagSquare,
        flagWide
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$UserType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$UserType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$UserType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserTypeFromJson(json);

  late String id;

  @JsonKey(unknownEnumValue: App.artemisUnknown)
  List<App>? apps;

  String? email;

  @JsonKey(unknownEnumValue: UserRole.artemisUnknown)
  List<UserRole>? roles;

  String? title;

  String? about;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  String? locale;

  @JsonKey(unknownEnumValue: SourcesEnum.artemisUnknown)
  SourcesEnum? source;

  @JsonKey(unknownEnumValue: UserStatus.artemisUnknown)
  UserStatus? status;

  String? lastName;

  String? username;

  String? firstName;

  bool? plugged;

  late DateTime createdAt;

  late DateTime updatedAt;

  bool? isMailValid;

  DateTime? dateOfBirth;

  String? phoneNumber;

  @JsonKey(unknownEnumValue: MobileThemesEnum.artemisUnknown)
  MobileThemesEnum? mobileTheme;

  String? placeOfBirth;

  @JsonKey(unknownEnumValue: MaritalStatus.artemisUnknown)
  MaritalStatus? maritalStatus;

  bool? newsletterSubs;

  bool? hasAutoGeneratedEmail;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PhoneType? phone;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureType? picture;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$PictureType>?
      pictures;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$LanguageType>?
      languages;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$CountryType?
      nationality;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType>?
      billingAddress;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType>?
      shippingAddress;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$FullAddressType>?
      residentialAddress;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType>?
      chatContact;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialValueType>?
      socialMedia;

  PerformChallengeByUser$Mutation$ResponseDtoType$UserType$SocialLoginDataType?
      socialLoginData;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserEducationType>?
      education;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$UserWorkType>?
      work;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$UserType$StateType>?
      lived;

  List<String>? hobbies;

  List<String>? interests;

  @override
  List<Object?> get props => [
        id,
        apps,
        email,
        roles,
        title,
        about,
        gender,
        locale,
        source,
        status,
        lastName,
        username,
        firstName,
        plugged,
        createdAt,
        updatedAt,
        isMailValid,
        dateOfBirth,
        phoneNumber,
        mobileTheme,
        placeOfBirth,
        maritalStatus,
        newsletterSubs,
        hasAutoGeneratedEmail,
        phone,
        picture,
        pictures,
        languages,
        nationality,
        billingAddress,
        shippingAddress,
        residentialAddress,
        chatContact,
        socialMedia,
        socialLoginData,
        education,
        work,
        lived,
        hobbies,
        interests
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$UserTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$Answers$QuestionChoiceDtoType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$Answers$QuestionChoiceDtoType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$Answers$QuestionChoiceDtoType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$QuestionChoiceDtoTypeFromJson(
          json);

  late String item;

  bool? enable;

  @override
  List<Object?> get props => [item, enable];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$QuestionChoiceDtoTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureTypeFromJson(
          json);

  String? baseUrl;

  String? path;

  int? width;

  int? height;

  int? x;

  int? y;

  String? alt;

  @override
  List<Object?> get props => [baseUrl, path, width, height, x, y, alt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaTypeFromJson(
          json);

  List<String>? videos;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureType>?
      deg360;

  List<PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType$PictureType>?
      pictures;

  @override
  List<Object?> get props => [videos, deg360, pictures];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepTypeFromJson(
          json);

  late String id;

  String? title;

  String? description;

  PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType$MediaType?
      media;

  @override
  List<Object?> get props => [id, title, description, media];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepTypeToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType$Answers
    extends JsonSerializable with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType$Answers();

  factory PerformChallengeByUser$Mutation$ResponseDtoType$Answers.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$AnswersFromJson(json);

  late String id;

  int? order;

  String? title;

  String? description;

  late List<
          PerformChallengeByUser$Mutation$ResponseDtoType$Answers$QuestionChoiceDtoType>
      choices;

  bool? mandatory;

  int? duration;

  @JsonKey(unknownEnumValue: QuestionTypeEnum.artemisUnknown)
  QuestionTypeEnum? type;

  PerformChallengeByUser$Mutation$ResponseDtoType$Answers$ChallengeStepType?
      challengeStep;

  int? points;

  bool? score;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [
        id,
        order,
        title,
        description,
        choices,
        mandatory,
        duration,
        type,
        challengeStep,
        points,
        score,
        createdAt,
        updatedAt
      ];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoType$AnswersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation$ResponseDtoType extends JsonSerializable
    with EquatableMixin {
  PerformChallengeByUser$Mutation$ResponseDtoType();

  factory PerformChallengeByUser$Mutation$ResponseDtoType.fromJson(
          Map<String, dynamic> json) =>
      _$PerformChallengeByUser$Mutation$ResponseDtoTypeFromJson(json);

  late String id;

  late PerformChallengeByUser$Mutation$ResponseDtoType$UserType executor;

  late PerformChallengeByUser$Mutation$ResponseDtoType$Answers answers;

  late DateTime createdAt;

  late DateTime updatedAt;

  @override
  List<Object?> get props => [id, executor, answers, createdAt, updatedAt];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$Mutation$ResponseDtoTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUser$Mutation extends JsonSerializable
    with EquatableMixin {
  PerformChallengeByUser$Mutation();

  factory PerformChallengeByUser$Mutation.fromJson(Map<String, dynamic> json) =>
      _$PerformChallengeByUser$MutationFromJson(json);

  late PerformChallengeByUser$Mutation$ResponseDtoType performChallengeByUser;

  @override
  List<Object?> get props => [performChallengeByUser];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUser$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ResponseInput extends JsonSerializable with EquatableMixin {
  ResponseInput({
    required this.question,
    this.target,
    required this.answers,
  });

  factory ResponseInput.fromJson(Map<String, dynamic> json) =>
      _$ResponseInputFromJson(json);

  late String question;

  TargetInput? target;

  late List<String> answers;

  @override
  List<Object?> get props => [question, target, answers];

  @override
  Map<String, dynamic> toJson() => _$ResponseInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TargetInput extends JsonSerializable with EquatableMixin {
  TargetInput({
    this.pos,
    this.user,
  });

  factory TargetInput.fromJson(Map<String, dynamic> json) =>
      _$TargetInputFromJson(json);

  String? pos;

  String? user;

  @override
  List<Object?> get props => [pos, user];

  @override
  Map<String, dynamic> toJson() => _$TargetInputToJson(this);
}

enum PredefinedActionsEnum {
  @JsonValue('LOGIN')
  login,
  @JsonValue('REGISTER')
  register,
  @JsonValue('NEWSLETTER')
  newsletter,
  @JsonValue('ADD_WISHLIST')
  addWishlist,
  @JsonValue('PRODUCT_RATING')
  productRating,
  @JsonValue('PRODUCT_REVIEW')
  productReview,
  @JsonValue('COMPLETE_PROFILE')
  completeProfile,
  @JsonValue('SHARE_BLOG_FACEBOOK')
  shareBlogFacebook,
  @JsonValue('SHARE_FACEBOOK_PAGE')
  shareFacebookPage,
  @JsonValue('SHARE_PRODUCT_FACEBOOK')
  shareProductFacebook,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum JockerKindEnum {
  @JsonValue('ADD_10_SEC')
  add10Sec,
  @JsonValue('ELIMINATE_2_SUGGESTIONS')
  eliminate2Suggestions,
  @JsonValue('SHOW_USERS_PERCENTAGE')
  showUsersPercentage,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum Gender {
  @JsonValue('MALE')
  male,
  @JsonValue('FEMALE')
  female,
  @JsonValue('PREFER_NOT_TO_SAY')
  preferNotToSay,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum ChallengeStatusEnum {
  @JsonValue('DRAFT')
  draft,
  @JsonValue('ONGOING')
  ongoing,
  @JsonValue('FINISHED')
  finished,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum App {
  @JsonValue('BOSK')
  bosk,
  @JsonValue('SKUAD')
  skuad,
  @JsonValue('FIGAMY')
  figamy,
  @JsonValue('COCKPIT')
  cockpit,
  @JsonValue('DIKTUP')
  diktup,
  @JsonValue('MAGARI')
  magari,
  @JsonValue('RECOLDA')
  recolda,
  @JsonValue('SIFCA')
  sifca,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum UserRole {
  @JsonValue('API')
  api,
  @JsonValue('ADMIN')
  admin,
  @JsonValue('EDITOR')
  editor,
  @JsonValue('MANAGER')
  manager,
  @JsonValue('CONSUMER')
  consumer,
  @JsonValue('COMMUNITY')
  community,
  @JsonValue('FINANCIAL')
  financial,
  @JsonValue('WAREHOUSE')
  warehouse,
  @JsonValue('COMMERCIAL')
  commercial,
  @JsonValue('MERCHANDISER')
  merchandiser,
  @JsonValue('NOT_SPECIFIED')
  notSpecified,
  @JsonValue('GROUP_MODERATOR')
  groupModerator,
  @JsonValue('WHOLESALER_OWNER')
  wholesalerOwner,
  @JsonValue('WHOLESALER_MANAGER')
  wholesalerManager,
  @JsonValue('MANUFACTURER_OWNER')
  manufacturerOwner,
  @JsonValue('WHOLESALER_ASSISTANT')
  wholesalerAssistant,
  @JsonValue('MANUFACTURER_MANAGER')
  manufacturerManager,
  @JsonValue('MANUFACTURER_ASSISTANT')
  manufacturerAssistant,
  @JsonValue('SALES')
  sales,
  @JsonValue('SYSTEM')
  system,
  @JsonValue('CATALOG')
  catalog,
  @JsonValue('CONTENT')
  content,
  @JsonValue('LOYALTY')
  loyalty,
  @JsonValue('NETWORK')
  network,
  @JsonValue('CUSTOMERS')
  customers,
  @JsonValue('INVENTORY')
  inventory,
  @JsonValue('ORGANIZATION')
  organization,
  @JsonValue('MERCHANDISING')
  merchandising,
  @JsonValue('DASHBOARDS_SALES')
  dashboardsSales,
  @JsonValue('DASHBOARDS_FINANCE')
  dashboardsFinance,
  @JsonValue('DASHBOARDS_ANALYTICS')
  dashboardsAnalytics,
  @JsonValue('DASHBOARDS_WAREHOUSE')
  dashboardsWarehouse,
  @JsonValue('DASHBOARDS_MERCHANDISING')
  dashboardsMerchandising,
  @JsonValue('POS_OWNER')
  posOwner,
  @JsonValue('POS_WAITER')
  posWaiter,
  @JsonValue('POS_MANAGER')
  posManager,
  @JsonValue('DELIVERY_MAN')
  deliveryMan,
  @JsonValue('POS_ASSISTANT')
  posAssistant,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum SourcesEnum {
  @JsonValue('FIGAMY')
  figamy,
  @JsonValue('OOREDOO')
  ooredoo,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum UserStatus {
  @JsonValue('ONLINE')
  online,
  @JsonValue('AWAY')
  away,
  @JsonValue('BUSY')
  busy,
  @JsonValue('OFFLINE')
  offline,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum MobileThemesEnum {
  @JsonValue('DARK')
  dark,
  @JsonValue('LIGHT')
  light,
  @JsonValue('SYSTEM')
  system,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum MaritalStatus {
  @JsonValue('SINGLE')
  single,
  @JsonValue('MARRIED')
  married,
  @JsonValue('ENGAGED')
  engaged,
  @JsonValue('WIDOWED')
  widowed,
  @JsonValue('DIVORCED')
  divorced,
  @JsonValue('SEPERATED')
  seperated,
  @JsonValue('IN_RELATIONSHIP')
  inRelationship,
  @JsonValue('PREFER_NOT_TO_SAY')
  preferNotToSay,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum StateCapitalEnum {
  @JsonValue('PRIMARY')
  primary,
  @JsonValue('ADMIN')
  admin,
  @JsonValue('MINOR')
  minor,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum SocialImageStyleEnum {
  @JsonValue('BUBBLE')
  bubble,
  @JsonValue('COLOR')
  color,
  @JsonValue('STICKER')
  sticker,
  @JsonValue('COLOR_HAND_DROWN')
  colorHandDrown,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum AcademicLevel {
  @JsonValue('PRIMARY')
  primary,
  @JsonValue('HIGH_SCHOOL')
  highSchool,
  @JsonValue('UNIVERSITY')
  university,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

enum QuestionTypeEnum {
  @JsonValue('SHORT_ANSWER')
  shortAnswer,
  @JsonValue('PARAGRAPH')
  paragraph,
  @JsonValue('MULTIPLE_CHOICE')
  multipleChoice,
  @JsonValue('SINGLE_CHOICE')
  singleChoice,
  @JsonValue('DROPDOWN')
  dropdown,
  @JsonValue('PICTURE')
  picture,
  @JsonValue('DATE')
  date,
  @JsonValue('TIME')
  time,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

final GET_CHALLENGES_QUERY_DOCUMENT_OPERATION_NAME = 'getChallenges';
final GET_CHALLENGES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'getChallenges'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getChallenges'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'media'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'videos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'deg360'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'pictures'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'challengeType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'rules'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'icon'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'minStep'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minCheckPoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minGiftValue'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'claimReward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'activityTypes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'theme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'predefined'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'enable'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'action'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'jockers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'jocker'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'kind'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'cost'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'fees'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'enable'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'creator'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'validationNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'picture'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'endDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'winners'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'checkpoints'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'checkpoint'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'maxAnswers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'audience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              )
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'target'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'pos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'wholesaler'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'manufacturer'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class GetChallengesQuery
    extends GraphQLQuery<GetChallenges$Query, JsonSerializable> {
  GetChallengesQuery();

  @override
  final DocumentNode document = GET_CHALLENGES_QUERY_DOCUMENT;

  @override
  final String operationName = GET_CHALLENGES_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  List<Object?> get props => [document, operationName];

  @override
  GetChallenges$Query parse(Map<String, dynamic> json) =>
      GetChallenges$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesPaginatedArguments extends JsonSerializable
    with EquatableMixin {
  GetChallengesPaginatedArguments({this.pagination});

  @override
  factory GetChallengesPaginatedArguments.fromJson(Map<String, dynamic> json) =>
      _$GetChallengesPaginatedArgumentsFromJson(json);

  final PaginationInput? pagination;

  @override
  List<Object?> get props => [pagination];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesPaginatedArgumentsToJson(this);
}

final GET_CHALLENGES_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME =
    'getChallengesPaginated';
final GET_CHALLENGES_PAGINATED_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'getChallengesPaginated'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pagination')),
        type: NamedTypeNode(
          name: NameNode(value: 'PaginationInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getChallengesPaginated'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'pagination'),
            value: VariableNode(name: NameNode(value: 'pagination')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'count'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isLast'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'objects'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'challengeType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'rules'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'minStep'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minCheckPoints'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minGiftValue'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'claimReward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'activityTypes'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'theme'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'predefined'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'enable'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'action'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'jockers'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'jocker'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'title'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'description'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'icon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'cost'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'kind'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'media'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'videos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'deg360'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'pictures'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'target'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'pos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'wholesaler'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'manufacturer'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'fees'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'enable'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'creator'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'gender'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lastName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'firstName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'number'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'isValid'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'countryCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'validationNumber'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'startDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'endDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'winners'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'rank'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'reward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'checkpoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'checkpoint'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'amount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'maxAnswers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'audience'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
        ]),
      )
    ]),
  )
]);

class GetChallengesPaginatedQuery extends GraphQLQuery<
    GetChallengesPaginated$Query, GetChallengesPaginatedArguments> {
  GetChallengesPaginatedQuery({required this.variables});

  @override
  final DocumentNode document = GET_CHALLENGES_PAGINATED_QUERY_DOCUMENT;

  @override
  final String operationName =
      GET_CHALLENGES_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  final GetChallengesPaginatedArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  GetChallengesPaginated$Query parse(Map<String, dynamic> json) =>
      GetChallengesPaginated$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ChallengeArguments extends JsonSerializable with EquatableMixin {
  ChallengeArguments({required this.id});

  @override
  factory ChallengeArguments.fromJson(Map<String, dynamic> json) =>
      _$ChallengeArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() => _$ChallengeArgumentsToJson(this);
}

final CHALLENGE_QUERY_DOCUMENT_OPERATION_NAME = 'challenge';
final CHALLENGE_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'challenge'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'id')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'challenge'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'id'),
            value: VariableNode(name: NameNode(value: 'id')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'media'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'videos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'deg360'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'pictures'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'challengeType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'rules'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'icon'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'minStep'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minCheckPoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minGiftValue'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'claimReward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'activityTypes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'theme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'predefined'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'enable'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'action'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'jockers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'jocker'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'kind'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'cost'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'fees'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'enable'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'creator'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'validationNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'picture'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'endDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'winners'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'checkpoints'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'checkpoint'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'maxAnswers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'audience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              )
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'target'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'pos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'wholesaler'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'manufacturer'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class ChallengeQuery extends GraphQLQuery<Challenge$Query, ChallengeArguments> {
  ChallengeQuery({required this.variables});

  @override
  final DocumentNode document = CHALLENGE_QUERY_DOCUMENT;

  @override
  final String operationName = CHALLENGE_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  final ChallengeArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  Challenge$Query parse(Map<String, dynamic> json) =>
      Challenge$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetPaginatedArguments extends JsonSerializable
    with EquatableMixin {
  GetChallengesByTargetPaginatedArguments({
    required this.target,
    this.pagination,
  });

  @override
  factory GetChallengesByTargetPaginatedArguments.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetPaginatedArgumentsFromJson(json);

  late TargetACIInput target;

  final PaginationInput? pagination;

  @override
  List<Object?> get props => [target, pagination];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetPaginatedArgumentsToJson(this);
}

final GET_CHALLENGES_BY_TARGET_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME =
    'getChallengesByTargetPaginated';
final GET_CHALLENGES_BY_TARGET_PAGINATED_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'getChallengesByTargetPaginated'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'target')),
        type: NamedTypeNode(
          name: NameNode(value: 'TargetACIInput'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pagination')),
        type: NamedTypeNode(
          name: NameNode(value: 'PaginationInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getChallengesByTargetPaginated'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'target'),
            value: VariableNode(name: NameNode(value: 'target')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pagination'),
            value: VariableNode(name: NameNode(value: 'pagination')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'count'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isLast'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'objects'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'challengeType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'rules'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'minStep'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minCheckPoints'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minGiftValue'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'claimReward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'activityTypes'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'theme'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'predefined'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'enable'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'action'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'jockers'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'jocker'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'title'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'description'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'icon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'cost'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'kind'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'media'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'videos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'deg360'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'pictures'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'target'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'pos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'wholesaler'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'manufacturer'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'fees'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'enable'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'creator'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'gender'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lastName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'firstName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'number'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'isValid'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'countryCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'validationNumber'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'startDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'endDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'winners'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'rank'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'reward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'checkpoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'checkpoint'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'amount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'maxAnswers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'audience'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
        ]),
      )
    ]),
  )
]);

class GetChallengesByTargetPaginatedQuery extends GraphQLQuery<
    GetChallengesByTargetPaginated$Query,
    GetChallengesByTargetPaginatedArguments> {
  GetChallengesByTargetPaginatedQuery({required this.variables});

  @override
  final DocumentNode document =
      GET_CHALLENGES_BY_TARGET_PAGINATED_QUERY_DOCUMENT;

  @override
  final String operationName =
      GET_CHALLENGES_BY_TARGET_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  final GetChallengesByTargetPaginatedArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  GetChallengesByTargetPaginated$Query parse(Map<String, dynamic> json) =>
      GetChallengesByTargetPaginated$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndCreatorPaginatedArguments extends JsonSerializable
    with EquatableMixin {
  GetChallengesByTargetAndCreatorPaginatedArguments({
    required this.target,
    this.pagination,
  });

  @override
  factory GetChallengesByTargetAndCreatorPaginatedArguments.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndCreatorPaginatedArgumentsFromJson(json);

  late TargetACIInput target;

  final PaginationInput? pagination;

  @override
  List<Object?> get props => [target, pagination];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndCreatorPaginatedArgumentsToJson(this);
}

final GET_CHALLENGES_BY_TARGET_AND_CREATOR_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME =
    'getChallengesByTargetAndCreatorPaginated';
final GET_CHALLENGES_BY_TARGET_AND_CREATOR_PAGINATED_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'getChallengesByTargetAndCreatorPaginated'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'target')),
        type: NamedTypeNode(
          name: NameNode(value: 'TargetACIInput'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pagination')),
        type: NamedTypeNode(
          name: NameNode(value: 'PaginationInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getChallengesByTargetAndCreatorPaginated'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'target'),
            value: VariableNode(name: NameNode(value: 'target')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pagination'),
            value: VariableNode(name: NameNode(value: 'pagination')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'count'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isLast'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'objects'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'challengeType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'rules'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'minStep'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minCheckPoints'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minGiftValue'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'claimReward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'activityTypes'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'theme'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'predefined'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'enable'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'action'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'jockers'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'jocker'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'title'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'description'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'icon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'cost'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'kind'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'media'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'videos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'deg360'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'pictures'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'target'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'pos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'wholesaler'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'manufacturer'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'fees'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'enable'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'creator'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'gender'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lastName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'firstName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'number'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'isValid'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'countryCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'validationNumber'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'startDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'endDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'winners'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'rank'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'reward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'checkpoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'checkpoint'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'amount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'maxAnswers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'audience'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
        ]),
      )
    ]),
  )
]);

class GetChallengesByTargetAndCreatorPaginatedQuery extends GraphQLQuery<
    GetChallengesByTargetAndCreatorPaginated$Query,
    GetChallengesByTargetAndCreatorPaginatedArguments> {
  GetChallengesByTargetAndCreatorPaginatedQuery({required this.variables});

  @override
  final DocumentNode document =
      GET_CHALLENGES_BY_TARGET_AND_CREATOR_PAGINATED_QUERY_DOCUMENT;

  @override
  final String operationName =
      GET_CHALLENGES_BY_TARGET_AND_CREATOR_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  final GetChallengesByTargetAndCreatorPaginatedArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  GetChallengesByTargetAndCreatorPaginated$Query parse(
          Map<String, dynamic> json) =>
      GetChallengesByTargetAndCreatorPaginated$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GetChallengesByTargetAndUserAudiencePaginatedArguments
    extends JsonSerializable with EquatableMixin {
  GetChallengesByTargetAndUserAudiencePaginatedArguments({
    required this.target,
    this.pagination,
  });

  @override
  factory GetChallengesByTargetAndUserAudiencePaginatedArguments.fromJson(
          Map<String, dynamic> json) =>
      _$GetChallengesByTargetAndUserAudiencePaginatedArgumentsFromJson(json);

  late TargetACIInput target;

  final PaginationInput? pagination;

  @override
  List<Object?> get props => [target, pagination];

  @override
  Map<String, dynamic> toJson() =>
      _$GetChallengesByTargetAndUserAudiencePaginatedArgumentsToJson(this);
}

final GET_CHALLENGES_BY_TARGET_AND_USER_AUDIENCE_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME =
    'getChallengesByTargetAndUserAudiencePaginated';
final GET_CHALLENGES_BY_TARGET_AND_USER_AUDIENCE_PAGINATED_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'getChallengesByTargetAndUserAudiencePaginated'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'target')),
        type: NamedTypeNode(
          name: NameNode(value: 'TargetACIInput'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pagination')),
        type: NamedTypeNode(
          name: NameNode(value: 'PaginationInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getChallengesByTargetAndUserAudiencePaginated'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'target'),
            value: VariableNode(name: NameNode(value: 'target')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pagination'),
            value: VariableNode(name: NameNode(value: 'pagination')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'count'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isLast'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'objects'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'challengeType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'rules'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'minStep'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minCheckPoints'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'minGiftValue'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'claimReward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'activityTypes'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'theme'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'predefined'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'enable'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'action'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'jockers'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'jocker'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'title'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'description'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'icon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'cost'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'kind'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'media'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'videos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'deg360'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'pictures'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'target'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'pos'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'wholesaler'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'manufacturer'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'id'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  )
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'fees'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'enable'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'creator'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'gender'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lastName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'firstName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'number'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'isValid'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'countryCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'validationNumber'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'startDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'endDate'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'winners'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'rank'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'reward'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'checkpoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'checkpoint'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'amount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'maxAnswers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'audience'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
        ]),
      )
    ]),
  )
]);

class GetChallengesByTargetAndUserAudiencePaginatedQuery extends GraphQLQuery<
    GetChallengesByTargetAndUserAudiencePaginated$Query,
    GetChallengesByTargetAndUserAudiencePaginatedArguments> {
  GetChallengesByTargetAndUserAudiencePaginatedQuery({required this.variables});

  @override
  final DocumentNode document =
      GET_CHALLENGES_BY_TARGET_AND_USER_AUDIENCE_PAGINATED_QUERY_DOCUMENT;

  @override
  final String operationName =
      GET_CHALLENGES_BY_TARGET_AND_USER_AUDIENCE_PAGINATED_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  final GetChallengesByTargetAndUserAudiencePaginatedArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  GetChallengesByTargetAndUserAudiencePaginated$Query parse(
          Map<String, dynamic> json) =>
      GetChallengesByTargetAndUserAudiencePaginated$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GetLeaderboardByChallengeArguments extends JsonSerializable
    with EquatableMixin {
  GetLeaderboardByChallengeArguments({
    required this.challenge,
    this.pagination,
  });

  @override
  factory GetLeaderboardByChallengeArguments.fromJson(
          Map<String, dynamic> json) =>
      _$GetLeaderboardByChallengeArgumentsFromJson(json);

  late String challenge;

  final PaginationInput? pagination;

  @override
  List<Object?> get props => [challenge, pagination];

  @override
  Map<String, dynamic> toJson() =>
      _$GetLeaderboardByChallengeArgumentsToJson(this);
}

final GET_LEADERBOARD_BY_CHALLENGE_QUERY_DOCUMENT_OPERATION_NAME =
    'getLeaderboardByChallenge';
final GET_LEADERBOARD_BY_CHALLENGE_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'getLeaderboardByChallenge'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'challenge')),
        type: NamedTypeNode(
          name: NameNode(value: 'ID'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pagination')),
        type: NamedTypeNode(
          name: NameNode(value: 'PaginationInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getLeaderboardByChallenge'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'challenge'),
            value: VariableNode(name: NameNode(value: 'challenge')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pagination'),
            value: VariableNode(name: NameNode(value: 'pagination')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'count'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isLast'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'objects'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'user'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'apps'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'roles'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'about'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'gender'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'locale'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'source'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'status'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lastName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'firstName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'plugged'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isMailValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'dateOfBirth'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phoneNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'mobileTheme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'placeOfBirth'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'maritalStatus'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'newsletterSubs'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'hasAutoGeneratedEmail'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'number'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'isValid'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'countryCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'validationNumber'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'languages'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'nationality'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'dialCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'billingAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'address'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'postCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'addressLine'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'location'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'type'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'coordinates'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'state'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'phone'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'number'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'countryCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'shippingAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'address'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'postCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'addressLine'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'location'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'type'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'coordinates'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'state'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'phone'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'number'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'countryCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'residentialAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'address'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'postCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'addressLine'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'location'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'type'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'coordinates'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'state'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'phone'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'number'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'countryCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'chatContact'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'fontIcon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'images'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'style'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'images'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'svg'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'png'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'value'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'socialMedia'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'fontIcon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'images'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'style'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'images'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'svg'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'png'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'value'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'socialLoginData'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'ooredoo'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'facebook'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'token'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'email'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'last_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'first_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'google'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'sub'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'email'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'token'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'locale'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'picture'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'given_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'family_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'email_verified'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'apple'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'email'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'status'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'givenName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'familyName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'identityToken'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'userIdentifier'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'authorizationCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'education'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'level'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'tags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'from'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'to'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'graduated'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'work'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'company'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'position'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'tags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'from'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'to'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'current'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'lived'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'adminName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'capital'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'population'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'ascii'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lat'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lng'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'hobbies'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'interests'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reputationLevel'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'rank'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'perks'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'discount'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'lossAmount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'nextLevelMax'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'inactivityCycle'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'levelInterval'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'min'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'max'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'reputationLevel'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'currentUser'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'user'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'apps'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'email'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'roles'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'about'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'gender'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'locale'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'source'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'status'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lastName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'firstName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'plugged'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isMailValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'dateOfBirth'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phoneNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'mobileTheme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'placeOfBirth'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'maritalStatus'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'newsletterSubs'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'hasAutoGeneratedEmail'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'phone'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'number'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'isValid'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'countryCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'validationNumber'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'languages'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'nationality'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'dialCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'billingAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'address'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'postCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'addressLine'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'location'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'type'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'coordinates'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'state'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'phone'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'number'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'countryCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'shippingAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'address'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'postCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'addressLine'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'location'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'type'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'coordinates'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'state'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'phone'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'number'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'countryCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'residentialAddress'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'address'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'postCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'addressLine'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'location'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'type'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'coordinates'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'state'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'phone'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'number'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'countryCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'chatContact'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'fontIcon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'images'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'style'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'images'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'svg'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'png'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'value'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'socialMedia'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'fontIcon'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'images'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'style'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'images'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'svg'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'png'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'size48'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size96'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size144'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size240'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'size480'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet:
                                            SelectionSetNode(selections: [
                                          FieldNode(
                                            name: NameNode(value: 'baseUrl'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'path'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'width'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'height'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'x'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'y'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                          FieldNode(
                                            name: NameNode(value: 'alt'),
                                            alias: null,
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null,
                                          ),
                                        ]),
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'value'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'socialLoginData'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'ooredoo'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'facebook'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'token'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'email'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'last_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'first_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'google'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'sub'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'email'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'token'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'locale'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'picture'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'given_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'family_name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'email_verified'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'apple'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'email'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'status'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'givenName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'familyName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'identityToken'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'userIdentifier'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'authorizationCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'education'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'level'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'tags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'from'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'to'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'graduated'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'work'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'company'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'position'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'city'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'adminName'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'capital'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'population'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'ascii'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lat'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'lng'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'country'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'name'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'code'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'dialCode'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'iconFlag'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'createdAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'updatedAt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagSquare'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'flagWide'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'baseUrl'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'path'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'width'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'height'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'x'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'y'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'alt'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null,
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'tags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'from'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'to'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'current'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'lived'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'adminName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'capital'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'population'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'ascii'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lat'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lng'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'hobbies'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'interests'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reputationLevel'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'rank'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'color'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'picture'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'perks'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'discount'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'lossAmount'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'nextLevelMax'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'inactivityCycle'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'levelInterval'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'min'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'max'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'reputationLevel'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
        ]),
      )
    ]),
  )
]);

class GetLeaderboardByChallengeQuery extends GraphQLQuery<
    GetLeaderboardByChallenge$Query, GetLeaderboardByChallengeArguments> {
  GetLeaderboardByChallengeQuery({required this.variables});

  @override
  final DocumentNode document = GET_LEADERBOARD_BY_CHALLENGE_QUERY_DOCUMENT;

  @override
  final String operationName =
      GET_LEADERBOARD_BY_CHALLENGE_QUERY_DOCUMENT_OPERATION_NAME;

  @override
  final GetLeaderboardByChallengeArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  GetLeaderboardByChallenge$Query parse(Map<String, dynamic> json) =>
      GetLeaderboardByChallenge$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateChallengeArguments extends JsonSerializable with EquatableMixin {
  CreateChallengeArguments({required this.input});

  @override
  factory CreateChallengeArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateChallengeArgumentsFromJson(json);

  late ChallengeInput input;

  @override
  List<Object?> get props => [input];

  @override
  Map<String, dynamic> toJson() => _$CreateChallengeArgumentsToJson(this);
}

final CREATE_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME = 'createChallenge';
final CREATE_CHALLENGE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.mutation,
    name: NameNode(value: 'createChallenge'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'input')),
        type: NamedTypeNode(
          name: NameNode(value: 'ChallengeInput'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'createChallenge'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'input'),
            value: VariableNode(name: NameNode(value: 'input')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'media'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'videos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'deg360'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'pictures'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'challengeType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'rules'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'icon'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'minStep'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minCheckPoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minGiftValue'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'claimReward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'activityTypes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'theme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'predefined'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'enable'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'action'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'jockers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'jocker'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'kind'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'cost'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'fees'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'enable'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'creator'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'validationNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'picture'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'endDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'winners'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'checkpoints'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'checkpoint'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'maxAnswers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'audience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              )
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'target'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'pos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'wholesaler'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'manufacturer'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class CreateChallengeMutation
    extends GraphQLQuery<CreateChallenge$Mutation, CreateChallengeArguments> {
  CreateChallengeMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CHALLENGE_MUTATION_DOCUMENT;

  @override
  final String operationName =
      CREATE_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME;

  @override
  final CreateChallengeArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  CreateChallenge$Mutation parse(Map<String, dynamic> json) =>
      CreateChallenge$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateChallengeArguments extends JsonSerializable with EquatableMixin {
  UpdateChallengeArguments({
    required this.id,
    required this.input,
  });

  @override
  factory UpdateChallengeArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateChallengeArgumentsFromJson(json);

  late String id;

  late ChallengeInput input;

  @override
  List<Object?> get props => [id, input];

  @override
  Map<String, dynamic> toJson() => _$UpdateChallengeArgumentsToJson(this);
}

final UPDATE_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME = 'updateChallenge';
final UPDATE_CHALLENGE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.mutation,
    name: NameNode(value: 'updateChallenge'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'id')),
        type: NamedTypeNode(
          name: NameNode(value: 'ID'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'input')),
        type: NamedTypeNode(
          name: NameNode(value: 'ChallengeInput'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'updateChallenge'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'id'),
            value: VariableNode(name: NameNode(value: 'id')),
          ),
          ArgumentNode(
            name: NameNode(value: 'input'),
            value: VariableNode(name: NameNode(value: 'input')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'media'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'videos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'deg360'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'pictures'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'challengeType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'rules'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'icon'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'minStep'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minCheckPoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minGiftValue'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'claimReward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'activityTypes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'theme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'predefined'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'enable'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'action'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'jockers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'jocker'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'kind'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'cost'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'fees'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'enable'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'creator'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'validationNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'picture'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'endDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'winners'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'checkpoints'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'checkpoint'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'maxAnswers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'audience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              )
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'target'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'pos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'wholesaler'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'manufacturer'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class UpdateChallengeMutation
    extends GraphQLQuery<UpdateChallenge$Mutation, UpdateChallengeArguments> {
  UpdateChallengeMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_CHALLENGE_MUTATION_DOCUMENT;

  @override
  final String operationName =
      UPDATE_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME;

  @override
  final UpdateChallengeArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  UpdateChallenge$Mutation parse(Map<String, dynamic> json) =>
      UpdateChallenge$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveAudienceFromChallengeArguments extends JsonSerializable
    with EquatableMixin {
  RemoveAudienceFromChallengeArguments({required this.id});

  @override
  factory RemoveAudienceFromChallengeArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveAudienceFromChallengeArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() =>
      _$RemoveAudienceFromChallengeArgumentsToJson(this);
}

final REMOVE_AUDIENCE_FROM_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME =
    'removeAudienceFromChallenge';
final REMOVE_AUDIENCE_FROM_CHALLENGE_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.mutation,
    name: NameNode(value: 'removeAudienceFromChallenge'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'id')),
        type: NamedTypeNode(
          name: NameNode(value: 'ID'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'removeAudienceFromChallenge'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'id'),
            value: VariableNode(name: NameNode(value: 'id')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'media'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'videos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'deg360'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'pictures'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'challengeType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'rules'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'icon'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'media'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'videos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'deg360'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'pictures'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'minStep'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minCheckPoints'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'minGiftValue'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'claimReward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'activityTypes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'icon'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'theme'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'predefined'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'enable'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'action'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'target'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'pos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'wholesaler'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'manufacturer'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          )
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'jockers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'jocker'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'title'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'description'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'icon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'cost'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'kind'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'media'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'videos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'deg360'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'pictures'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'target'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'pos'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'wholesaler'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'manufacturer'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'id'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              )
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'cost'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'fees'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'enable'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'target'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'pos'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'wholesaler'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'manufacturer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'creator'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'validationNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'picture'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'endDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'winners'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'rank'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'reward'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'checkpoints'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'checkpoint'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'amount'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'maxAnswers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'audience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              )
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'target'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'pos'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'wholesaler'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'manufacturer'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  )
                ]),
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class RemoveAudienceFromChallengeMutation extends GraphQLQuery<
    RemoveAudienceFromChallenge$Mutation,
    RemoveAudienceFromChallengeArguments> {
  RemoveAudienceFromChallengeMutation({required this.variables});

  @override
  final DocumentNode document =
      REMOVE_AUDIENCE_FROM_CHALLENGE_MUTATION_DOCUMENT;

  @override
  final String operationName =
      REMOVE_AUDIENCE_FROM_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME;

  @override
  final RemoveAudienceFromChallengeArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  RemoveAudienceFromChallenge$Mutation parse(Map<String, dynamic> json) =>
      RemoveAudienceFromChallenge$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteChallengeArguments extends JsonSerializable with EquatableMixin {
  DeleteChallengeArguments({required this.id});

  @override
  factory DeleteChallengeArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteChallengeArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];

  @override
  Map<String, dynamic> toJson() => _$DeleteChallengeArgumentsToJson(this);
}

final DELETE_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME = 'deleteChallenge';
final DELETE_CHALLENGE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.mutation,
    name: NameNode(value: 'deleteChallenge'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'id')),
        type: NamedTypeNode(
          name: NameNode(value: 'ID'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'deleteChallenge'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'id'),
            value: VariableNode(name: NameNode(value: 'id')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'success'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'message'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class DeleteChallengeMutation
    extends GraphQLQuery<DeleteChallenge$Mutation, DeleteChallengeArguments> {
  DeleteChallengeMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_CHALLENGE_MUTATION_DOCUMENT;

  @override
  final String operationName =
      DELETE_CHALLENGE_MUTATION_DOCUMENT_OPERATION_NAME;

  @override
  final DeleteChallengeArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  DeleteChallenge$Mutation parse(Map<String, dynamic> json) =>
      DeleteChallenge$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PerformChallengeByUserArguments extends JsonSerializable
    with EquatableMixin {
  PerformChallengeByUserArguments({
    required this.challengeId,
    required this.jockers,
    required this.response,
  });

  @override
  factory PerformChallengeByUserArguments.fromJson(Map<String, dynamic> json) =>
      _$PerformChallengeByUserArgumentsFromJson(json);

  late String challengeId;

  late List<String> jockers;

  late ResponseInput response;

  @override
  List<Object?> get props => [challengeId, jockers, response];

  @override
  Map<String, dynamic> toJson() =>
      _$PerformChallengeByUserArgumentsToJson(this);
}

final PERFORM_CHALLENGE_BY_USER_MUTATION_DOCUMENT_OPERATION_NAME =
    'performChallengeByUser';
final PERFORM_CHALLENGE_BY_USER_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.mutation,
    name: NameNode(value: 'performChallengeByUser'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'challengeId')),
        type: NamedTypeNode(
          name: NameNode(value: 'ID'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'jockers')),
        type: ListTypeNode(
          type: NamedTypeNode(
            name: NameNode(value: 'String'),
            isNonNull: true,
          ),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'response')),
        type: NamedTypeNode(
          name: NameNode(value: 'ResponseInput'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'performChallengeByUser'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'challengeId'),
            value: VariableNode(name: NameNode(value: 'challengeId')),
          ),
          ArgumentNode(
            name: NameNode(value: 'jockers'),
            value: VariableNode(name: NameNode(value: 'jockers')),
          ),
          ArgumentNode(
            name: NameNode(value: 'response'),
            value: VariableNode(name: NameNode(value: 'response')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'executor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'apps'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'roles'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'about'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'locale'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'source'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'plugged'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'isMailValid'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'dateOfBirth'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phoneNumber'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'mobileTheme'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'placeOfBirth'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'maritalStatus'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'newsletterSubs'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'hasAutoGeneratedEmail'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'isValid'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'validationNumber'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'picture'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'pictures'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'baseUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'path'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'width'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'height'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'x'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'y'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'alt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'languages'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'iconFlag'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'flagSquare'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'flagWide'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'nationality'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'code'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'dialCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'iconFlag'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'flagSquare'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'flagWide'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'billingAddress'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'city'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'address'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'postCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'addressLine'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'location'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'type'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'coordinates'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'country'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'dialCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'state'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'adminName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'capital'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'population'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'ascii'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lat'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lng'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'owner'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'phone'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'number'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'countryCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'shippingAddress'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'city'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'address'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'postCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'addressLine'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'location'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'type'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'coordinates'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'country'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'dialCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'state'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'adminName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'capital'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'population'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'ascii'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lat'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lng'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'owner'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'phone'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'number'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'countryCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'residentialAddress'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'city'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'address'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'postCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'addressLine'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'location'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'type'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'coordinates'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'country'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'dialCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'state'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'adminName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'capital'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'population'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'ascii'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lat'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lng'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'owner'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'phone'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'number'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'countryCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'chatContact'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'fontIcon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'images'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'style'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'images'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'svg'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'size48'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size96'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size144'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size240'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size480'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'png'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'size48'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size96'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size144'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size240'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size480'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'value'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'socialMedia'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'fontIcon'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'images'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'style'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'images'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'svg'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'size48'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size96'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size144'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size240'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size480'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                              FieldNode(
                                name: NameNode(value: 'png'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: SelectionSetNode(selections: [
                                  FieldNode(
                                    name: NameNode(value: 'size48'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size96'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size144'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size240'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                  FieldNode(
                                    name: NameNode(value: 'size480'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                        name: NameNode(value: 'baseUrl'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'path'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'width'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'height'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'x'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'y'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                      FieldNode(
                                        name: NameNode(value: 'alt'),
                                        alias: null,
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null,
                                      ),
                                    ]),
                                  ),
                                ]),
                              ),
                            ]),
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'value'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'socialLoginData'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'ooredoo'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      )
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'facebook'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'token'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'email'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'last_name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'first_name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'google'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'sub'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'email'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'token'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'locale'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'picture'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'given_name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'family_name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'email_verified'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'apple'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'email'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'status'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'givenName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'familyName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'identityToken'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'userIdentifier'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'authorizationCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'education'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'level'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'tags'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'from'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'to'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'graduated'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'work'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'company'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'position'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'city'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'adminName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'capital'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'population'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'ascii'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lat'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'lng'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'country'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'id'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'name'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'code'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'dialCode'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'iconFlag'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'createdAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'updatedAt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagSquare'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                          FieldNode(
                            name: NameNode(value: 'flagWide'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: SelectionSetNode(selections: [
                              FieldNode(
                                name: NameNode(value: 'baseUrl'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'path'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'width'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'height'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'x'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'y'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                              FieldNode(
                                name: NameNode(value: 'alt'),
                                alias: null,
                                arguments: [],
                                directives: [],
                                selectionSet: null,
                              ),
                            ]),
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'tags'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'from'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'to'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'current'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'lived'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'adminName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'capital'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'population'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'ascii'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lat'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'lng'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'country'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'code'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'dialCode'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'iconFlag'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'createdAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'updatedAt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagSquare'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'flagWide'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'flagSquare'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'flagWide'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'baseUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'path'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'width'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'height'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'x'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'y'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'alt'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'hobbies'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'interests'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'question'),
            alias: NameNode(value: 'answers'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'order'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'title'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'choices'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'item'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'enable'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'mandatory'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'duration'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'type'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'challengeStep'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'title'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'description'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'media'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'videos'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'deg360'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                      FieldNode(
                        name: NameNode(value: 'pictures'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                            name: NameNode(value: 'baseUrl'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'path'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'width'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'height'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'x'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'y'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                          FieldNode(
                            name: NameNode(value: 'alt'),
                            alias: null,
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                          ),
                        ]),
                      ),
                    ]),
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'points'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'score'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      )
    ]),
  )
]);

class PerformChallengeByUserMutation extends GraphQLQuery<
    PerformChallengeByUser$Mutation, PerformChallengeByUserArguments> {
  PerformChallengeByUserMutation({required this.variables});

  @override
  final DocumentNode document = PERFORM_CHALLENGE_BY_USER_MUTATION_DOCUMENT;

  @override
  final String operationName =
      PERFORM_CHALLENGE_BY_USER_MUTATION_DOCUMENT_OPERATION_NAME;

  @override
  final PerformChallengeByUserArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];

  @override
  PerformChallengeByUser$Mutation parse(Map<String, dynamic> json) =>
      PerformChallengeByUser$Mutation.fromJson(json);
}
